@page "/"
@using System.Net
@using Newtonsoft.Json
@using TemplateShared
@using System.Web
@using Microsoft.Azure.CognitiveServices.Vision.ComputerVision.Models
@inject NavigationManager NavManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Charts
@using LabelPosition = Syncfusion.Blazor.Charts.LabelPosition

<h1>How sexy is this image?</h1>

@if (ChartPoints != null)
{
<SfChart>
    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category"></ChartPrimaryXAxis>
    <ChartSeriesCollection>
        <ChartSeries DataSource="@ChartPoints" XName="DataType" YName="Percentage" Type="ChartSeriesType.Column">
        </ChartSeries>
    </ChartSeriesCollection>
</SfChart>
}


@code {
    private ImageAnalysis Response;
    protected override async Task OnInitializedAsync()
    {
#if DEBUG
        // see https://docs.microsoft.com/en-us/aspnet/core/blazor/debug?view=aspnetcore-5.0&tabs=visual-studio
        await Task.Delay(2000);
#endif

        NavManager.TryGetQueryString<int>("entityId", out var entityId);

        if(!(NavManager.TryGetQueryString<string>("inriverRestApiKey", out var inriverRestApiKey) &&
        NavManager.TryGetQueryString<string>("inriverRestApiBaseUrl", out var inriverRestApiBaseUrl) &&
        NavManager.TryGetQueryString<string>("computerVisionUrl", out var computerVisionUrl) &&
        NavManager.TryGetQueryString<string>("computerVisionApiKey", out var computerVisionApiKey) &&
        NavManager.TryGetQueryString<string>("templateApiUrl", out var templateApiUrl)))
            return;

        var uriBuilder = new UriBuilder($"{templateApiUrl}/InriverApi");
        var query = HttpUtility.ParseQueryString(uriBuilder.Query);
        query["inriverRestApiKey"] = inriverRestApiKey;
        query["inriverRestApiBaseUrl"] = inriverRestApiBaseUrl;
        query["computerVisionUrl"] = computerVisionUrl;
        query["computerVisionApiKey"] = computerVisionApiKey;
        query["entityId"] = entityId.ToString();
        uriBuilder.Query = query.ToString() ?? string.Empty;

        var client = new HttpClient();
        Response = await client.GetFromJsonAsync<ImageAnalysis>(uriBuilder.ToString());

        ChartPoints = new List<RoundedColumnChartData>
        {
            new RoundedColumnChartData {DataType = "Adult", Percentage = Response.Adult.AdultScore * 100},
            new RoundedColumnChartData {DataType = "Gore", Percentage = Response.Adult.GoreScore * 100},
            new RoundedColumnChartData {DataType = "Racy", Percentage = Response.Adult.RacyScore * 100},
        };

    }

    public List<RoundedColumnChartData> ChartPoints;


    public List<RoundedColumnChartData> ChartPointsDe { get; set; } = new List<RoundedColumnChartData>
    {
        new RoundedColumnChartData {DataType = "Egg", Percentage = 106},
        new RoundedColumnChartData {DataType = "Fish", Percentage = 103},
        new RoundedColumnChartData {DataType = "Misc", Percentage = 198},
        new RoundedColumnChartData {DataType = "Tea", Percentage = 189},
        new RoundedColumnChartData {DataType = "Fruits", Percentage = 250}
    };

    public class RoundedColumnChartData
    {
        public string DataType { get; set; }
        public double Percentage { get; set; }
    }

        private List<ToolbarItemModel> Tools = new List<ToolbarItemModel>()
    {
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.StrikeThrough },
        new ToolbarItemModel() { Command = ToolbarCommand.FontName },
        new ToolbarItemModel() { Command = ToolbarCommand.FontSize },
        new ToolbarItemModel() { Command = ToolbarCommand.FontColor },
        new ToolbarItemModel() { Command = ToolbarCommand.BackgroundColor },
        new ToolbarItemModel() { Command = ToolbarCommand.LowerCase },
        new ToolbarItemModel() { Command = ToolbarCommand.UpperCase },
        new ToolbarItemModel() { Command = ToolbarCommand.SuperScript },
        new ToolbarItemModel() { Command = ToolbarCommand.SubScript },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Formats },
        new ToolbarItemModel() { Command = ToolbarCommand.Alignments },
        new ToolbarItemModel() { Command = ToolbarCommand.NumberFormatList },
        new ToolbarItemModel() { Command = ToolbarCommand.BulletFormatList },
        new ToolbarItemModel() { Command = ToolbarCommand.Outdent },
        new ToolbarItemModel() { Command = ToolbarCommand.Indent },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel() { Command = ToolbarCommand.Image },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateTable },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.ClearFormat },
        new ToolbarItemModel() { Command = ToolbarCommand.Print },
        new ToolbarItemModel() { Command = ToolbarCommand.SourceCode },
        new ToolbarItemModel() { Command = ToolbarCommand.FullScreen },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Undo },
        new ToolbarItemModel() { Command = ToolbarCommand.Redo }
    };
}